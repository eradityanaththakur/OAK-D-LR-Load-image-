# -*- coding: utf-8 -*-
"""Load image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11hXZNrvKVW3sbkzg3xIFfmpoAzzbf1NA
"""

!pip install depthai

import depthai as dai
import cv2

# Pipeline
pipeline = dai.Pipeline()

# Color
camRgb = pipeline.create(dai.node.ColorCamera)
xoutRgb = pipeline.create(dai.node.XLinkOut)
xoutRgb.setStreamName("rgb")


#Left
monoLeft = pipeline.create(dai.node.MonoCamera)
monoLeft.setBoardSocket(dai.CameraBoardSocket.LEFT)
xoutLeft = pipeline.create(dai.node.XLinkOut)
xoutLeft.setStreamName("left")


#Right
monoRight = pipeline.create(dai.node.MonoCamera)
monoRight.setBoardSocket(dai.CameraBoardSocket.RIGHT)
xoutRight = pipeline.create(dai.node.XLinkOut)
xoutRight.setStreamName("right")


# Linking
camRgb.preview.link(xoutRgb.input)
monoRight.out.link(xoutRight.input)
monoLeft.out.link(xoutLeft.input)


with dai.Device(pipeline) as device:
    qRgb = device.getOutputQueue(name="rgb", maxSize=2, blocking=False)
    qLeft = device.getOutputQueue(name="left", maxSize=2, blocking=False)
    qRight = device.getOutputQueue(name="right", maxSize=2, blocking=False)

    while True:
        inRgb = qRgb.get()  # blocking call, will wait until a new data has arrived
        inLeft = qLeft.get()  # blocking call, will wait until a new data has arrived
        inRight = qRight.get()  # blocking call, will wait until a new data has arrived

        cv2.imshow("rgb", cv2.cvtColor(inRgb.getCvFrame(), cv2.COLOR_RGB2BGR))
        #cv2.imshow("left", inLeft.getCvFrame())
        #cv2.imshow("right", inRight.getCvFrame())
        if cv2.waitKey(1) == ord('q'):
            break